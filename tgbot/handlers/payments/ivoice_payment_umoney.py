import logging
from datetime import datetime
from typing import Optional

from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from tgbot.mongo_db.db_api import subs

from tgbot.yoomoneylogic.yoomoney_api import PaymentYooMoney
from tgbot.keyboards.inline import payment_keyboard

payment_u_money_router = Router()


@payment_u_money_router.callback_query(
    F.data.contains("u_money"),
    StateFilter("check_plan"),
    flags={"throttling_key": "payment"},
)
async def invoicing_for_payment_u_money(call: CallbackQuery, state: FSMContext):
    user_id: int = call.from_user.id
    date: datetime = datetime.now()

    sub: Optional[dict] = await subs.find_one(
        filter={"user_id": user_id, "end_date": {"$gt": date}}
    )
    sub_text = ""
    if sub:
        sub_text = "\n\n<i> ‚úÖ –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∞. </i> \n\n"

    state_data = await state.get_data()
    current_price = state_data.get("current_price")
    month = state_data.get("month")

    amount = int(current_price)

    text = (
        f"<b>–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π</b> üí≥\n\n"
        f"–¶–µ–Ω–∞ –∑–∞ <b>{month}</b>:  <code>{amount} —Ä—É–±–ª–µ–π </code> {sub_text}\n\n"
        f"–û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π —á–µ—Ä–µ–∑ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –Æ–ú–∞–Ω–∏.\n"
        f"–≠—Ç–æ –Ω–∞–¥—ë–∂–Ω–æ –∏ —É–¥–æ–±–Ω–æ.\n\n"
        f"<i>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂' –ø–æ—Å–ª–µ —á–µ–≥–æ "
        f"–í–∞–º –ø—Ä–∏–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫</i>"
    )

    payment = PaymentYooMoney(amount=amount)
    payment.create()

    try:
        await call.message.edit_text(
            text=text,
            parse_mode="HTML",
            reply_markup=payment_keyboard(
                payment_id=payment.id, invoice=payment.invoice
            ),
        )
    except TelegramBadRequest as e:
        logging.info(f"Exception {e}, user_id {user_id}")

    await state.set_state("check_payment")
    await state.update_data(payment_id=payment.id, amount=payment.amount)
