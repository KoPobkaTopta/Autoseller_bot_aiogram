import logging
from datetime import datetime
from typing import Any

from aiogram import Bot

from tgbot.config import config
from tgbot.mongo_db.get_data_in_mongodb import get_data_in_subs

async def notification_to_admin_group(bot: Bot) -> None:
    """
    Notify the admin group about subscriptions ending soon.

    Args:
        bot (Bot): The bot instance to send notifications.

    Returns:
        None
    """
    today: datetime = datetime.now()
    reminder_days: int = 1  # How many days before the subscription ends to send a reminder

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –∏–∑ MongoDB
    clients: Any = await get_data_in_subs({"client_id": {"$exists": True}})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if not clients:
        logging.warning("No clients found with subscriptions.")
        return

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —É –∫–æ–≥–æ —Å–∫–æ—Ä–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞
    for client in clients:
        end_date: datetime = client["end_date"]
        client_id: str = client["client_id"]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        days_left: int = (end_date - today).days

        # –ï—Å–ª–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å –æ—Ç 1 –¥–æ reminder_days –¥–Ω–µ–π
        if 0 < days_left <= reminder_days:
            message: str = (
                f"‚ùå –£ –∫–ª–∏–µ–Ω—Ç–∞: {client_id} –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞. \n"
                f"–û—Å—Ç–∞–ª—Å—è {days_left} –¥."
            )
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
                await bot.send_message(chat_id=config.tg_bot.channel_id, text=message)
                logging.info(
                    f"Client: {client_id} is running out of subscriptions. Days left: {days_left}"
                )
            except Exception as e:
                logging.error(f"Failed to send message to admin group: {str(e)}")

async def notification_payment_cleared(
    bot: Bot, chat_id: int, amount: int, user: str, username: str
) -> None:
    """
    Notify about cleared payments.

    Args:
        bot (Bot): The bot instance to send notifications.
        chat_id (int): The ID of the chat to send the notification to.
        amount (int): The amount of payment cleared.
        user (str): The user who made the payment.
        username (str): The username of the user who made the payment.

    Returns:
        None
    """
    text: str = f"üì£  –°—É–ø–µ—Ä! üî• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}({username})üë§ –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å—É–º–º—É {amount} üÖøÔ∏è"
    try:
        await bot.send_message(chat_id, text=text)
        logging.info(f"User: {user}({username}) has paid a subscription of {amount}")
    except Exception as e:
        logging.error(f"Failed to send payment cleared notification: {str(e)}")

async def notification_trial_taken(
    bot: Bot, chat_id: int, user: str, username: str, client_id: str
) -> None:
    """
    Notify about taken trials.

    Args:
        bot (Bot): The bot instance to send notifications.
        chat_id (int): The ID of the chat to send the notification to.
        user (str): The user who took the trial.
        username (str): The username of the user who took the trial.
        client_id (str): The ID of the client.

    Returns:
        None
    """
    text: str = (
        f"‚è± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}({username})üë§ –æ—Ñ–æ—Ä–º–∏–ª TRIAL(–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥)\n"
        f"client_id: {client_id}"
    )
    try:
        await bot.send_message(chat_id, text=text)
        logging.info(f"User: {user}({username}) has taken a TRIAL(trial period). ID: {client_id}")
    except Exception as e:
        logging.error(f"Failed to send trial taken notification: {str(e)}")
